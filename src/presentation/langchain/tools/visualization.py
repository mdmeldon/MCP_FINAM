"""
LangChain –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π.

–≠—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –∞–≥–µ–Ω—Ç—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ Finam API.
"""

import json
import streamlit as st
from langchain.tools import tool
from typing import Optional
from src.presentation.langchain.visualization import (
    create_portfolio_sunburst,
    create_trades_chart,
    create_performance_chart,
    create_portfolio_performance_chart,
    create_rebalancing_table,
    create_rebalancing_comparison_chart,
)


@tool
def visualize_portfolio(account_data: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é Sunburst –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏.

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —á–µ—Ä–µ–∑ get_account.
    –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º,
    —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏, —Ü–≤–µ—Ç - –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏.

    Args:
        account_data: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç get_account –∏–∑ MCP).
                     –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "positions" —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π.

    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    Example:
        >>> # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:
        >>> account_json = '{"positions": [...], "equity": {...}}'
        >>> result = visualize_portfolio(account_json)
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = json.loads(account_data)
        positions = data.get("positions", [])

        if not positions:
            return "‚ùå –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        fig_json = create_portfolio_sunburst(positions)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "visualizations" not in st.session_state:
            st.session_state["visualizations"] = []

        st.session_state["visualizations"].append({
            "type": "sunburst",
            "data": fig_json,
            "title": "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏"
        })

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_positions = len(positions)
        sectors = set()
        total_value = 0

        for pos in positions:
            symbol = pos.get("symbol", "")
            from src.presentation.langchain.visualization.utils import get_sector_by_ticker, safe_float
            sector = get_sector_by_ticker(symbol)
            sectors.add(sector)

            quantity = safe_float(pos.get("quantity", {}))
            current_price = safe_float(pos.get("current_price", {}))
            total_value += quantity * current_price

        return f"""‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è Sunburst –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è!

üìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_positions}
- –°–µ–∫—Ç–æ—Ä–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏: {len(sectors)}
- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:,.0f} ‚ÇΩ

üí° –î–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –≤—ã—à–µ. –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Å–µ–∫—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
–ù–∞–≤–µ–¥–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

    except json.JSONDecodeError:
        return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {str(e)}"


@tool
def visualize_strategy_backtest(
    bars_data: str,
    trades_data: str,
    initial_capital: Optional[float] = 100000.0
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
    1. –ì—Ä–∞—Ñ–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
    2. –ö—Ä–∏–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–ø—Ä–∏–±—ã–ª—å, –ø—Ä–æ—Å–∞–¥–∫–∞, –≤–∏–Ω—Ä–µ–π—Ç)

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –±–∞—Ä–æ–≤ (bars) –∏ 
    —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.

    Args:
        bars_data: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –±–∞—Ä–∞–º–∏ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç bars –∏–∑ MCP).
                   –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "bars" —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–≤–µ—á–µ–π.
        trades_data: JSON-—Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–¥–µ–ª–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
                     –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å: timestamp, price, size, side.
        initial_capital: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100,000)

    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –∏ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

    Example:
        >>> bars_json = '{"bars": [...]}'
        >>> trades_json = '[{"timestamp": "...", "price": {...}, "side": "SIDE_BUY"}]'
        >>> result = visualize_strategy_backtest(bars_json, trades_json, 100000)
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        bars = json.loads(bars_data)
        trades = json.loads(trades_data)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞—Ä–æ–≤
        bars_list = bars.get("bars", []) if isinstance(bars, dict) else bars
        trades_list = trades if isinstance(trades, list) else [trades]

        if not bars_list:
            return "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–±–∞—Ä–æ–≤) –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."

        if not trades_list:
            return "‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –°–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫."

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        trades_fig = create_trades_chart(bars_list, trades_list)
        perf_fig, metrics = create_performance_chart(
            trades_list, initial_capital)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
        if "visualizations" not in st.session_state:
            st.session_state["visualizations"] = []

        st.session_state["visualizations"].extend([
            {
                "type": "trades",
                "data": trades_fig,
                "title": "üìà –ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"
            },
            {
                "type": "performance",
                "data": perf_fig,
                "title": "üí∞ –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
            }
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_text = "\n".join(
            [f"  ‚Ä¢ **{k}**: {v}" for k, v in metrics.items()])

        return f"""‚úÖ –°–æ–∑–¥–∞–Ω—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏!

**üìà –ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏:**
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
- –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –æ—Ç–º–µ—á–µ–Ω—ã –∑–µ–ª–µ–Ω—ã–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏ –≤–≤–µ—Ä—Ö üî∫
- –¢–æ—á–∫–∏ –≤—ã—Ö–æ–¥–∞ –æ—Ç–º–µ—á–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏ –≤–Ω–∏–∑ üîª
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏

**üí∞ –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏:**
{metrics_text}

üí° –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—ã—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""

    except json.JSONDecodeError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {str(e)}"


@tool
def create_comparison_chart(instruments_data: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
    —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥.

    Args:
        instruments_data: JSON-—Å—Ç—Ä–æ–∫–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
                         –§–æ—Ä–º–∞—Ç: [{"symbol": "...", "bars": [...]}, ...]

    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    Example:
        >>> data = '[{"symbol": "SBER", "bars": [...]}, {"symbol": "GAZP", "bars": [...]}]'
        >>> result = create_comparison_chart(data)
    """
    try:
        import plotly.graph_objects as go
        from datetime import datetime
        from src.presentation.langchain.visualization.utils import safe_float

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        instruments = json.loads(instruments_data)

        if not instruments or not isinstance(instruments, list):
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()

        for instrument in instruments:
            symbol = instrument.get("symbol", "Unknown")
            bars = instrument.get("bars", [])

            if not bars:
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dates = []
            closes = []

            for bar in bars:
                try:
                    timestamp = bar.get("timestamp")
                    if isinstance(timestamp, str):
                        dates.append(datetime.fromisoformat(
                            timestamp.replace("Z", "+00:00")))
                    else:
                        dates.append(timestamp)

                    closes.append(safe_float(bar.get("close", {})))
                except:
                    continue

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—ã –∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π
            if closes and closes[0] != 0:
                normalized = [(c / closes[0] - 1) * 100 for c in closes]

                fig.add_trace(go.Scatter(
                    x=dates,
                    y=normalized,
                    mode="lines",
                    name=symbol.split("@")[0],
                    hovertemplate=f"<b>{symbol}</b><br>" +
                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ: %{y:.2f}%<br>" +
                    "–î–∞—Ç–∞: %{x}<br>" +
                    "<extra></extra>"
                ))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        fig.update_layout(
            title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ)",
            xaxis_title="–î–∞—Ç–∞",
            yaxis_title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ, %",
            hovermode="x unified",
            template="plotly_white",
            height=500,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )

        fig.add_hline(y=0, line_dash="dash", line_color="gray")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if "visualizations" not in st.session_state:
            st.session_state["visualizations"] = []

        st.session_state["visualizations"].append({
            "type": "comparison",
            "data": fig.to_json(),
            "title": "üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
        })

        instruments_count = len([i for i in instruments if i.get("bars")])

        return f"""‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤!

üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è {instruments_count} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç(–æ–≤).
–í—Å–µ —Ü–µ–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

üí° –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤—ã—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–µ–Ω–¥—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""

    except json.JSONDecodeError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}"


@tool
def visualize_portfolio_performance(
    portfolio_history: str,
    benchmark_bars: str,
    portfolio_name: Optional[str] = "–ü–æ—Ä—Ç—Ñ–µ–ª—å",
    benchmark_name: Optional[str] = "–ë–µ–Ω—á–º–∞—Ä–∫ (IMOEX)"
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º.

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è:
    1. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π –∏ —Ü–µ–Ω)
    2. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –±–∞—Ä–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω–¥–µ–∫—Å IMOEX@TQBR) —á–µ—Ä–µ–∑ bars –∏–∑ MCP

    –ì—Ä–∞—Ñ–∏–∫ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é
    –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

    Args:
        portfolio_history: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è.
                          –§–æ—Ä–º–∞—Ç: [{"timestamp": "...", "value": 100000}, ...]
        benchmark_bars: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –±–∞—Ä–∞–º–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç bars –∏–∑ MCP).
                       –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "bars" —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–≤–µ—á–µ–π.
        portfolio_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ü–æ—Ä—Ç—Ñ–µ–ª—å")
        benchmark_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ë–µ–Ω—á–º–∞—Ä–∫ (IMOEX)")

    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

    Example:
        >>> # –ü–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:
        >>> portfolio_hist = '[{"timestamp": "2024-01-01", "value": 100000}, ...]'
        >>> # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ä–æ–≤ –±–µ–Ω—á–º–∞—Ä–∫–∞:
        >>> benchmark = '{"bars": [...]}'
        >>> result = visualize_portfolio_performance(portfolio_hist, benchmark)
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_data = json.loads(portfolio_history)
        if not isinstance(portfolio_data, list):
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å –∏—Å—Ç–æ—Ä–∏–µ–π."

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –±–µ–Ω—á–º–∞—Ä–∫–∞
        benchmark_data = json.loads(benchmark_bars)
        benchmark_bars_list = benchmark_data.get(
            "bars", []) if isinstance(benchmark_data, dict) else benchmark_data

        if not portfolio_data and not benchmark_bars_list:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏/–∏–ª–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞."

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        fig_json = create_portfolio_performance_chart(
            portfolio_data,
            benchmark_bars_list,
            portfolio_name or "–ü–æ—Ä—Ç—Ñ–µ–ª—å",
            benchmark_name or "–ë–µ–Ω—á–º–∞—Ä–∫ (IMOEX)"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "visualizations" not in st.session_state:
            st.session_state["visualizations"] = []

        st.session_state["visualizations"].append({
            "type": "performance_comparison",
            "data": fig_json,
            "title": "üìà –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è vs –ë–µ–Ω—á–º–∞—Ä–∫"
        })

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        portfolio_return = 0
        benchmark_return = 0

        if portfolio_data and len(portfolio_data) >= 2:
            from src.presentation.langchain.visualization.utils import safe_float
            initial_value = safe_float(portfolio_data[0].get("value", {}))
            final_value = safe_float(portfolio_data[-1].get("value", {}))
            if initial_value > 0:
                portfolio_return = (
                    (final_value - initial_value) / initial_value) * 100

        if benchmark_bars_list and len(benchmark_bars_list) >= 2:
            from src.presentation.langchain.visualization.utils import safe_float
            initial_close = safe_float(benchmark_bars_list[0].get("close", {}))
            final_close = safe_float(benchmark_bars_list[-1].get("close", {}))
            if initial_close > 0:
                benchmark_return = (
                    (final_close - initial_close) / initial_close) * 100

        outperformance = portfolio_return - benchmark_return

        return f"""‚úÖ –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è!

üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ **{portfolio_name}**: {portfolio_return:+.2f}%
  ‚Ä¢ **{benchmark_name}**: {benchmark_return:+.2f}%
  ‚Ä¢ **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞**: {outperformance:+.2f}%

üí° –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤—ã—à–µ. –û–±–µ –∫—Ä–∏–≤—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–æ–≤."""

    except json.JSONDecodeError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {str(e)}"


@tool
def visualize_portfolio_rebalancing(
    account_data: str,
    strategy: Optional[str] = "equal"
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º.

    –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —á–µ—Ä–µ–∑ get_account.
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∫–∞–∂–µ—Ç:
    1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ç–µ–∫—É—â–∏–º–∏ –∏ —Ü–µ–ª–µ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏
    2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    3. –°—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤

    Args:
        account_data: JSON-—Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç get_account –∏–∑ MCP).
                     –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ "positions" —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π.
        strategy: –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "equal"):
                 - "equal": –†–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (–≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–Ω—ã)
                 - "sector_equal": –†–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏

    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Å–¥–µ–ª–æ–∫

    Example:
        >>> # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:
        >>> account_json = '{"positions": [...], "equity": {...}}'
        >>> result = visualize_portfolio_rebalancing(account_json, "equal")
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = json.loads(account_data)
        positions = data.get("positions", [])

        if not positions:
            return "‚ùå –í –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏."

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        table_json, trades = create_rebalancing_table(
            positions, strategy or "equal")
        chart_json = create_rebalancing_comparison_chart(
            positions, strategy or "equal")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "visualizations" not in st.session_state:
            st.session_state["visualizations"] = []

        strategy_name = "–†–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ" if strategy == "equal" else "–†–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–µ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º"

        st.session_state["visualizations"].extend([
            {
                "type": "rebalancing_table",
                "data": table_json,
                "title": f"‚öñÔ∏è –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ ({strategy_name})"
            },
            {
                "type": "rebalancing_chart",
                "data": chart_json,
                "title": "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∏ —Ü–µ–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤"
            }
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        if not trades:
            return f"""‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å —É–∂–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "{strategy_name}"!

–¢–µ–∫—É—â–∏–µ –≤–µ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤—ã–º. –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

üí° –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—ã—à–µ."""

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Ç–∏–ø—É
        buy_trades = [t for t in trades if t["action"] == "–ö—É–ø–∏—Ç—å"]
        sell_trades = [t for t in trades if t["action"] == "–ü—Ä–æ–¥–∞—Ç—å"]

        trades_summary = []

        if buy_trades:
            trades_summary.append("**üü¢ –ü–æ–∫—É–ø–∫–∞:**")
            for trade in buy_trades[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                from src.presentation.langchain.visualization.utils import format_currency
                trades_summary.append(
                    f"  ‚Ä¢ {trade['ticker']}: {trade['quantity']:.0f} —à—Ç. "
                    f"(~{format_currency(trade['value'])})"
                )
            if len(buy_trades) > 5:
                trades_summary.append(
                    f"  ‚Ä¢ ... –∏ –µ—â–µ {len(buy_trades) - 5} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç(–æ–≤)")

        if sell_trades:
            trades_summary.append("\n**üî¥ –ü—Ä–æ–¥–∞–∂–∞:**")
            for trade in sell_trades[:5]:
                from src.presentation.langchain.visualization.utils import format_currency
                trades_summary.append(
                    f"  ‚Ä¢ {trade['ticker']}: {trade['quantity']:.0f} —à—Ç. "
                    f"(~{format_currency(trade['value'])})"
                )
            if len(sell_trades) > 5:
                trades_summary.append(
                    f"  ‚Ä¢ ... –∏ –µ—â–µ {len(sell_trades) - 5} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç(–æ–≤)")

        trades_text = "\n".join(trades_summary)

        return f"""‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è!

üìä **–°—Ç—Ä–∞—Ç–µ–≥–∏—è**: {strategy_name}
üìà **–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π**: {len(trades)} —Å–¥–µ–ª–æ–∫

{trades_text}

üí° –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—ã—à–µ:
  ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
  ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∏ —Ü–µ–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤

‚ö†Ô∏è **–í–∞–∂–Ω–æ**: –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è. –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤."""

    except json.JSONDecodeError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {str(e)}"
