import asyncio
import datetime
import json

import pendulum
import streamlit as st
import plotly.graph_objects as go
from langchain.tools import tool
from langchain_openai import ChatOpenAI
from langchain_mcp_adapters.client import MultiServerMCPClient
from langchain_community.agent_toolkits.load_tools import load_tools
from langgraph.prebuilt import create_react_agent as lg_create_react_agent
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.runnables import RunnableConfig
from src.configs import LangchainConfig
from langchain_community.chat_message_histories import (
    StreamlitChatMessageHistory,
)

from src.presentation.langchain.callback import get_streamlit_cb
from src.presentation.langchain.tools.visualization import (
    visualize_portfolio,
    visualize_strategy_backtest,
    create_comparison_chart,
)

history = StreamlitChatMessageHistory(key="chat_messages")


@st.cache_resource(show_spinner=False)
def _cached_client(account_id: str, finam_api_token: str):
    with open("git.mcp-server-config.json", "r") as file:
        config = json.loads(file.read())

        if config["finam_mcp"]["transport"] == "stdio":
            config["finam_mcp"]["env"] = {
                "FINAM_API_TOKEN": finam_api_token,
                "FINAM_ACCOUNT_ID": account_id,
            }
        return MultiServerMCPClient(config)


@st.cache_resource(show_spinner=False)
def _cached_llm(cfg: LangchainConfig):
    return ChatOpenAI(
        api_key=cfg.API_KEY,
        base_url=cfg.BASE_URL,
        model=cfg.MODEL,
        streaming=True,
    )


async def _init_agent_async(cfg: LangchainConfig, account_id: str, finam_api_token: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LangGraph-–∞–≥–µ–Ω—Ç –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–≤ —Ç.—á. MCP)."""
    llm = _cached_llm(cfg)

    @tool
    def get_current_time(tz: str = "UTC") -> pendulum.DateTime:
        """–í–ê–ñ–ù–û! –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑–∞–Ω —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è!"""
        return pendulum.now(tz)

    tools = load_tools(["ddg-search"])
    tools.append(get_current_time)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    tools.extend([
        visualize_portfolio,
        visualize_strategy_backtest,
        create_comparison_chart,
    ])

    client = _cached_client(account_id=account_id,
                            finam_api_token=finam_api_token)

    try:
        tools_from_mcp = await client.get_tools()
        tools.extend(tools_from_mcp)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å MCP-—Ç—É–ª—ã: {e}")

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    system_message = SystemMessage(content="""–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ Finam Trade API.

üéØ –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –ü–û –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò:

1. **–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è**: –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π:
   - –°–Ω–∞—á–∞–ª–∞ get_account –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   - –ó–∞—Ç–µ–º visualize_portfolio –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Sunburst –¥–∏–∞–≥—Ä–∞–º–º—ã
   
2. **–ë—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏**: –ü—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π:
   - –°–Ω–∞—á–∞–ª–∞ bars –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   - –ó–∞—Ç–µ–º trades –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–æ–∫
   - –ó–∞—Ç–µ–º visualize_strategy_backtest –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

3. **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤**: –ü—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π:
   - bars –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
   - create_comparison_chart –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞

4. **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞**: –í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –í–ú–ï–°–¢–ï —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π, –Ω–µ —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–Ω—è—Ç–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.""")

    agent_graph = lg_create_react_agent(
        llm, tools, prompt=system_message)
    return agent_graph


async def _handle_chat_async(agent_graph, messages, callbacks: list, recursion_limit: int = 25):
    config: RunnableConfig = {"callbacks": callbacks,
                              "recursion_limit": recursion_limit}
    return await agent_graph.ainvoke({"messages": messages}, config)


async def _handle_chat_async_stream(agent_graph, messages, callbacks: list, recursion_limit: int = 25) -> str:
    config: RunnableConfig = {"callbacks": callbacks,
                              "recursion_limit": recursion_limit}
    async for _ in agent_graph.astream({"messages": messages}, config):
        pass
    cb = callbacks[0]
    return getattr(cb, "_answer_accum", "")


def _get_persistent_loop() -> asyncio.AbstractEventLoop:
    loop = st.session_state.get("_persistent_loop")
    if loop is None or loop.is_closed():
        loop = asyncio.new_event_loop()
        st.session_state["_persistent_loop"] = loop
    return loop


def create_langchain_app(cfg: LangchainConfig):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    try:
        current_api_key = cfg.API_KEY.get_secret_value() if cfg.API_KEY else ""
    except AttributeError:
        # –ï—Å–ª–∏ cfg.API_KEY —É–∂–µ —Å—Ç—Ä–æ–∫–∞ (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        current_api_key = str(cfg.API_KEY) if cfg.API_KEY else ""

    with st.sidebar:
        st.title("Finam AI Assistant")

        # OpenRouter API Configuration
        with st.expander("ü§ñ AI –ú–æ–¥–µ–ª—å (OpenRouter)", expanded=not current_api_key):
            openrouter_key = st.text_input(
                "OpenRouter API Key:",
                value=current_api_key,
                type="password",
                help="–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://openrouter.ai/keys"
            )
            if openrouter_key and openrouter_key != current_api_key:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                import os
                from pydantic import SecretStr
                os.environ["OPENROUTER_API_KEY"] = openrouter_key
                cfg.API_KEY = SecretStr(openrouter_key)
                current_api_key = openrouter_key

        st.info(f"–ú–æ–¥–µ–ª—å: {cfg.MODEL}")

        # Finam API Configuration
        with st.expander("üîë Finam API:"):
            finam_api_token = st.text_input(
                "Finam API —Ç–æ–∫–µ–Ω:", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            account_id = st.text_input(
                "ID —Å—á–µ—Ç–∞:", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        st.divider()
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", use_container_width=True):
            st.session_state["visualizations"] = []
            st.session_state["message_visualizations"] = {}
            st.rerun()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_viz = sum(len(v) for v in st.session_state.get(
            "message_visualizations", {}).values())
        if total_viz > 0:
            st.caption(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {total_viz}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not current_api_key:
        st.sidebar.error("‚ùå OpenRouter API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        st.sidebar.info(
            "üí° –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ [OpenRouter](https://openrouter.ai/keys)")
        st.stop()
    else:
        st.sidebar.success("‚úÖ OpenRouter API –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    if not finam_api_token:
        st.sidebar.warning(
            "‚ö†Ô∏è Finam API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Finam API token –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª–µ."
        )
    else:
        st.sidebar.success("‚úÖ Finam API —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    loop = _get_persistent_loop()
    agent_graph = loop.run_until_complete(
        _init_agent_async(cfg, account_id, finam_api_token))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    if "messages" not in st.session_state:
        st.session_state["messages"] = [AIMessage(content="–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")]

    if "visualizations" not in st.session_state:
        st.session_state["visualizations"] = []

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º (–∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è -> —Å–ø–∏—Å–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π)
    if "message_visualizations" not in st.session_state:
        st.session_state["message_visualizations"] = {}

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    for idx, msg in enumerate(st.session_state.messages):
        if type(msg) == HumanMessage:
            st.chat_message("user").write(msg.content)
        elif type(msg) == AIMessage:
            with st.chat_message("assistant"):
                st.write(msg.content)

                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if idx in st.session_state.get("message_visualizations", {}):
                    visualizations = st.session_state["message_visualizations"][idx]
                    for viz_idx, viz in enumerate(visualizations):
                        st.markdown(f"#### {viz['title']}")
                        try:
                            fig = go.Figure(json.loads(viz['data']))
                            st.plotly_chart(
                                fig, use_container_width=True, key=f"msg_{idx}_viz_{viz_idx}"
                            )
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

    if prompt := st.chat_input():
        st.session_state.messages.append(HumanMessage(content=prompt))
        st.chat_message("user").write(prompt)

        with st.chat_message("assistant"):
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            viz_count_before = len(st.session_state.get("visualizations", []))

            st_callback = get_streamlit_cb(st.empty(), expand_steps=True)
            last_msg = loop.run_until_complete(
                _handle_chat_async_stream(
                    agent_graph, st.session_state.messages, [st_callback])
            )
            if last_msg:
                st.session_state.messages.append(AIMessage(content=last_msg))

            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏—Ö –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            viz_count_after = len(st.session_state.get("visualizations", []))
            if viz_count_after > viz_count_before:
                # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ)
                last_message_idx = len(st.session_state.messages) - 1

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                new_visualizations = st.session_state["visualizations"][viz_count_before:]

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                if last_message_idx not in st.session_state["message_visualizations"]:
                    st.session_state["message_visualizations"][last_message_idx] = [
                    ]
                st.session_state["message_visualizations"][last_message_idx].extend(
                    new_visualizations)

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                st.rerun()
