"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤.
"""

import plotly.graph_objects as go
from typing import List, Dict, Any
from datetime import datetime
from .utils import safe_float


def create_trades_chart(bars: List[Dict[str, Any]], trades: List[Dict[str, Any]]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ —Å–¥–µ–ª–æ–∫ (–≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤).

    –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
    - –õ–∏–Ω–∏—é —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –±–∞—Ä–∞–º
    - –ó–µ–ª–µ–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤–≤–µ—Ä—Ö (üî∫) –¥–ª—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ (–ø–æ–∫—É–ø–æ–∫)
    - –ö—Ä–∞—Å–Ω—ã–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤–Ω–∏–∑ (üîª) –¥–ª—è —Ç–æ—á–µ–∫ –≤—ã—Ö–æ–¥–∞ (–ø—Ä–æ–¥–∞–∂)
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–¥–µ–ª–æ–∫

    Args:
        bars: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ BarsRespDTO.bars
        trades: –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ side, price, timestamp

    Returns:
        JSON-—Å—Ç—Ä–æ–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º Plotly

    Example:
        >>> bars = [
        ...     {
        ...         "timestamp": "2024-01-01T10:00:00Z",
        ...         "close": {"value": "100.5"},
        ...         "high": {"value": "101"},
        ...         "low": {"value": "99.5"}
        ...     }
        ... ]
        >>> trades = [
        ...     {
        ...         "timestamp": "2024-01-01T10:00:00Z",
        ...         "side": "SIDE_BUY",
        ...         "price": {"value": "100.5"}
        ...     }
        ... ]
        >>> fig_json = create_trades_chart(bars, trades)
    """
    fig = go.Figure()

    if not bars:
        # –ü—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        fig.add_annotation(
            text="–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            xref="paper",
            yref="paper",
            x=0.5,
            y=0.5,
            showarrow=False,
            font=dict(size=16)
        )
        fig.update_layout(title="–ì—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        return fig.to_json()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞—Ä–æ–≤
    dates = []
    closes = []
    highs = []
    lows = []
    volumes = []

    for bar in bars:
        try:
            timestamp = bar.get("timestamp")
            if isinstance(timestamp, str):
                dates.append(datetime.fromisoformat(
                    timestamp.replace("Z", "+00:00")))
            else:
                dates.append(timestamp)

            closes.append(safe_float(bar.get("close", {})))
            highs.append(safe_float(bar.get("high", {})))
            lows.append(safe_float(bar.get("low", {})))
            volumes.append(safe_float(bar.get("volume", {})))
        except (ValueError, TypeError) as e:
            continue

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è —Ü–µ–Ω
    fig.add_trace(go.Scatter(
        x=dates,
        y=closes,
        mode="lines",
        name="–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è",
        line=dict(color="rgb(50, 120, 200)", width=2),
        hovertemplate="<b>–¶–µ–Ω–∞</b>: %{y:.2f} ‚ÇΩ<br>" +
                      "<b>–î–∞—Ç–∞</b>: %{x}<br>" +
                      "<extra></extra>"
    ))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É high –∏ low –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    if highs and lows:
        fig.add_trace(go.Scatter(
            x=dates + dates[::-1],
            y=highs + lows[::-1],
            fill="toself",
            fillcolor="rgba(50, 120, 200, 0.1)",
            line=dict(color="rgba(255,255,255,0)"),
            name="–î–∏–∞–ø–∞–∑–æ–Ω High-Low",
            hoverinfo="skip",
            showlegend=False
        ))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–æ–∫
    if trades:
        entries = []
        exits = []

        for trade in trades:
            try:
                timestamp = trade.get("timestamp")
                if isinstance(timestamp, str):
                    trade_date = datetime.fromisoformat(
                        timestamp.replace("Z", "+00:00"))
                else:
                    trade_date = timestamp

                price = safe_float(trade.get("price", {}))
                size = safe_float(trade.get("size", {}))
                side = trade.get("side", "")

                trade_info = {
                    "date": trade_date,
                    "price": price,
                    "size": size,
                    "side": side
                }

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–¥–µ–ª–∫–∏
                if side in ["SIDE_BUY", "1", "BUY"]:
                    entries.append(trade_info)
                elif side in ["SIDE_SELL", "2", "SELL"]:
                    exits.append(trade_info)

            except (ValueError, TypeError, KeyError):
                continue

        # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (–ø–æ–∫—É–ø–∫–∏)
        if entries:
            fig.add_trace(go.Scatter(
                x=[t["date"] for t in entries],
                y=[t["price"] for t in entries],
                mode="markers",
                name="–í—Ö–æ–¥ (–ø–æ–∫—É–ø–∫–∞)",
                marker=dict(
                    symbol="triangle-up",
                    size=14,
                    color="rgb(50, 200, 50)",
                    line=dict(color="rgb(30, 150, 30)", width=2)
                ),
                hovertemplate="<b>üî∫ –í–•–û–î</b><br>" +
                              "–¶–µ–Ω–∞: %{y:.2f} ‚ÇΩ<br>" +
                              "–î–∞—Ç–∞: %{x}<br>" +
                              "<extra></extra>"
            ))

        # –¢–æ—á–∫–∏ –≤—ã—Ö–æ–¥–∞ (–ø—Ä–æ–¥–∞–∂–∏)
        if exits:
            fig.add_trace(go.Scatter(
                x=[t["date"] for t in exits],
                y=[t["price"] for t in exits],
                mode="markers",
                name="–í—ã—Ö–æ–¥ (–ø—Ä–æ–¥–∞–∂–∞)",
                marker=dict(
                    symbol="triangle-down",
                    size=14,
                    color="rgb(220, 50, 50)",
                    line=dict(color="rgb(180, 30, 30)", width=2)
                ),
                hovertemplate="<b>üîª –í–´–•–û–î</b><br>" +
                              "–¶–µ–Ω–∞: %{y:.2f} ‚ÇΩ<br>" +
                              "–î–∞—Ç–∞: %{x}<br>" +
                              "<extra></extra>"
            ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    fig.update_layout(
        title="–°–¥–µ–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫",
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–¶–µ–Ω–∞, ‚ÇΩ",
        hovermode="x unified",
        template="plotly_white",
        height=500,
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        margin=dict(l=60, r=30, t=80, b=60)
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_xaxes(
        showgrid=True,
        gridwidth=1,
        gridcolor="rgba(200, 200, 200, 0.3)",
        rangeslider_visible=False
    )

    fig.update_yaxes(
        showgrid=True,
        gridwidth=1,
        gridcolor="rgba(200, 200, 200, 0.3)"
    )

    return fig.to_json()
