from typing import Callable, TypeVar
import time

from streamlit.runtime.scriptrunner import add_script_run_ctx, get_script_run_ctx
from streamlit.delta_generator import DeltaGenerator

from langchain_core.callbacks.base import BaseCallbackHandler
try:
    # –î–ª—è –ª–æ–≥–æ–≤ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–∞ (Thought/Action/Observation)
    from langchain_core.agents import AgentAction, AgentFinish  # type: ignore
except Exception:  # pragma: no cover
    AgentAction = object  # type: ignore
    AgentFinish = object  # type: ignore


class StreamlitGraphCallbackHandler(BaseCallbackHandler):
    """
    –ü–æ—Ç–æ–∫–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è LangGraph/LangChain, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–ª—è Streamlit.

    - –í—ã–≤–æ–¥–∏—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã LLM –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–∞–≥–∏ —Ü–µ–ø–æ—á–∫–∏/–≥—Ä–∞—Ñ–∞ –∏ –≤—ã–∑–æ–≤—ã —Ç—É–ª–æ–≤
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—à–∏–±–∫–∏

    –í–∞–∂–Ω–æ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Streamlit –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª–ª–±—ç–∫–∞,
    —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å NoSessionContext.
    """

    def __init__(self, parent_container: DeltaGenerator, *,
                 expand_answer: bool = True,
                 expand_steps: bool = False,
                 **_: object):
        super().__init__()
        self._ctx = get_script_run_ctx()

        # –†–∞–∑–º–µ—Ç–∫–∞: —Ç–æ–ª—å–∫–æ –≤—ã–ø–∞–¥–∞—à–∫–∏ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        self._root = parent_container.container()
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π expander)
        self._iters_root = self._root.container()
        self._current_step = None  # type: ignore[var-annotated]
        self._current_step_idx: int | None = None
        self._step_index = 1
        # –°–æ—Å—Ç–æ—è–Ω–∏—è —à–∞–≥–æ–≤: expander –∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –µ–≥–æ –≤–µ—Ä—à–∏–Ω–µ
        self._steps: list[dict] = []
        self._expand_steps = expand_steps
        self._pending_thoughts: list[str] = []

        # –ù–∏–∂–µ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É –±–ª–æ–∫–∞)
        self._root.markdown("**–û—Ç–≤–µ—Ç:**")
        self._answer_box = self._root.empty()

        # –ë—É—Ñ–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –∏ —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._token_buf: list[str] = []
        self._last_flush = 0.0
        self._flush_every_tokens = 1
        self._flush_every_sec = 0.03
        self._answer_accum: str = ""

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    def _with_ctx(self, fn: Callable[[], None]) -> None:
        add_script_run_ctx(ctx=self._ctx)
        fn()

    # ===== LLM events =====
    def on_llm_start(self, *args, **kwargs) -> None:
        def _():
            self._token_buf.clear()
            self._answer_accum = ""
            self._answer_box.markdown("")
        self._with_ctx(_)

    def on_llm_new_token(self, token: str, *args, **kwargs) -> None:
        self._token_buf.append(token)

        now = time.time()
        should_flush = (
            len(self._token_buf) >= self._flush_every_tokens or
            (now - self._last_flush) >= self._flush_every_sec
        )
        if not should_flush:
            return

        # –ù–∞–∫–æ–ø–∏–º –∏ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ü–µ–ª–∏–∫–æ–º
        self._answer_accum += "".join(self._token_buf)
        self._token_buf.clear()
        self._last_flush = now

        def _():
            self._answer_box.markdown(self._answer_accum, unsafe_allow_html=False)
        self._with_ctx(_)

    def on_llm_end(self, *args, **kwargs) -> None:
        # –î–æ—Ñ–ª–∞—à–∏–º –æ—Å—Ç–∞—Ç–∫–∏ (–ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Ü–µ–ª–∏–∫–æ–º)
        if self._token_buf:
            self._answer_accum += "".join(self._token_buf)
            self._token_buf.clear()

            def _():
                self._answer_box.markdown(self._answer_accum)
            self._with_ctx(_)

    def on_llm_error(self, error: BaseException, *args, **kwargs) -> None:
        # –û—à–∏–±–∫–∏ –Ω–µ –≤—ã–¥–µ–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤—ã–ø–∞–¥–∞—à–∫—É, –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ç–µ–∫—É—â—É—é
        def _():
            target = self._current_step or self._iters_root
            target.markdown(f"**LLM error:** {error}")
        self._with_ctx(_)

    # ===== Chain / Graph events =====
    def on_chain_start(self, serialized, inputs, *args, **kwargs) -> None:
        # –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º
        return None

    def on_chain_end(self, outputs, *args, **kwargs) -> None:
        return None

    def on_chain_error(self, error: BaseException, *args, **kwargs) -> None:
        def _():
            target = self._current_step or self._iters_root
            target.markdown(f"**Chain error:** {error}")
        self._with_ctx(_)

    # ===== Tools =====
    def on_tool_start(self, serialized, input_str, *args, **kwargs) -> None:
        name = (serialized or {}).get("name", "tool")
        preview = input_str if isinstance(input_str, str) else str(input_str)
        if len(preview) > 500:
            preview = preview[:500] + "‚Ä¶"

        def _():
            # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (LangGraph –±–µ–∑ AgentAction), —Å–æ–∑–¥–∞–¥–∏–º –µ—ë –∑–¥–µ—Å—å
            if self._current_step is None:
                exp = self._iters_root.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {self._step_index}", expanded=self._expand_steps)
                status_ph = exp.empty()
                self._current_step = exp
                self._current_step_idx = len(self._steps)
                self._steps.append({"exp": exp, "status": status_ph, "tools": []})
                # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è ‚Äî –≤—ã–≤–µ–¥–µ–º –∏—Ö
                if self._pending_thoughts:
                    for t in self._pending_thoughts:
                        exp.markdown(f"```text\n{t}\n```")
                    self._pending_thoughts.clear()
                self._step_index += 1

            # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            if self._current_step_idx is not None and self._current_step_idx < len(self._steps):
                step = self._steps[self._current_step_idx]
                step["status"].markdown(f"üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: `{name}`‚Ä¶")
                tool_block_ph = step["exp"].empty()
                tool_block_exp = tool_block_ph.expander(f"{name} ‚Äî üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", expanded=False)
                tool_block_exp.markdown(f"**–í—Ö–æ–¥:**\n\n```\n{preview}\n```")
                step["tools"].append({
                    "name": name,
                    "status": "running",
                    "ph": tool_block_ph,
                    "input": input_str,
                })
        self._with_ctx(_)

    def on_tool_end(self, output, *args, **kwargs) -> None:
        out = output if isinstance(output, str) else str(output)
        if len(out) > 2000:
            out = out[:2000] + "‚Ä¶"

        def _():
            if self._current_step_idx is not None and self._current_step_idx < len(self._steps):
                step = self._steps[self._current_step_idx]
                # –ø–æ–º–µ—Ç–∏–º –∏—Ç–µ—Ä–∞—Ü–∏—é –∫–∞–∫ —É—Å–ø–µ—à–Ω—É—é
                step["status"].markdown("üü¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                tools_list = step.get("tools", [])
                if tools_list:
                    tool_info = tools_list[-1]
                    name = tool_info.get("name", "tool")
                    ph = tool_info["ph"]
                    tool_info["status"] = "success"
                    # –ø–µ—Ä–µ–æ—Ç—Ä–∏—Å—É–µ–º —ç–∫—Å–ø–∞–Ω–¥–µ—Ä —Å –Ω–æ–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    ph.empty()
                    exp = ph.expander(f"{name} ‚Äî üü¢ –£—Å–ø–µ—à–Ω–æ", expanded=False)
                    exp.markdown(f"**–í—Ö–æ–¥:**\n\n```\n{tool_info.get('input','')}\n```")
                    exp.markdown(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n```\n{out}\n```")
        self._with_ctx(_)

    def on_tool_error(self, error: BaseException, *args, **kwargs) -> None:
        def _():
            if self._current_step_idx is not None and self._current_step_idx < len(self._steps):
                step = self._steps[self._current_step_idx]
                step["status"].markdown(f"üî¥ –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {error}")
                tools_list = step.get("tools", [])
                if tools_list:
                    tool_info = tools_list[-1]
                    name = tool_info.get("name", "tool")
                    ph = tool_info["ph"]
                    tool_info["status"] = "error"
                    ph.empty()
                    exp = ph.expander(f"{name} ‚Äî üî¥ –û—à–∏–±–∫–∞", expanded=False)
                    exp.markdown(f"**–í—Ö–æ–¥:**\n\n```\n{tool_info.get('input','')}\n```")
                    exp.markdown(f"**–û—à–∏–±–∫–∞:** {error}")
        self._with_ctx(_)

    # ===== Agent reasoning (Thought / Action / Observation logs) =====
    def on_agent_action(self, action: AgentAction, *args, **kwargs) -> None:  # type: ignore[override]
        log_text = getattr(action, "log", "") or ""
        tool = getattr(action, "tool", "") or ""
        tool_input = getattr(action, "tool_input", "")
        tool_input_str = tool_input if isinstance(tool_input, str) else str(tool_input)
        if len(tool_input_str) > 1000:
            tool_input_str = tool_input_str[:1000] + "‚Ä¶"

        def _():
            # –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π expander –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
            exp = self._iters_root.expander(f"–ò—Ç–µ—Ä–∞—Ü–∏—è {self._step_index}", expanded=self._expand_steps)
            status_ph = exp.empty()
            self._current_step = exp
            self._current_step_idx = len(self._steps)
            self._steps.append({"exp": exp, "status": status_ph, "tools": []})
            if log_text:
                exp.markdown(f"```text\n{log_text}\n```")
            if tool:
                exp.markdown(f"–ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: `{tool}`\n\n```\n{tool_input_str}\n```")
            self._step_index += 1
        self._with_ctx(_)

    def on_agent_finish(self, finish: AgentFinish, *args, **kwargs) -> None:  # type: ignore[override]
        log_text = getattr(finish, "log", "") or ""

        def _():
            # –ü–∏—à–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π
            target = self._current_step or self._iters_root.expander("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", expanded=False)
            if log_text:
                target.markdown(f"```text\n{log_text}\n```")
        self._with_ctx(_)


def get_streamlit_cb(parent_container: DeltaGenerator,
                     *,
                     expand_answer: bool = True,
                     expand_steps: bool = False,
                     **kwargs: object) -> BaseCallbackHandler:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ LangGraph –≤ Streamlit.
    """
    return StreamlitGraphCallbackHandler(
        parent_container,
        expand_answer=expand_answer,
        expand_steps=expand_steps,
    )