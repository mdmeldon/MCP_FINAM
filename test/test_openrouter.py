"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OPENROUTER —á–µ—Ä–µ–∑ langchain
"""
import os
import pytest
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage
from src.configs import LangchainConfig


def test_openrouter_connection():
    """
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OPENROUTER –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    - OPENROUTER_API_KEY
    - OPENROUTER_BASE_URL
    - OPENROUTER_MODEL
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    cfg = LangchainConfig()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    assert cfg.API_KEY.get_secret_value(), "OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert cfg.BASE_URL, "OPENROUTER_BASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    assert cfg.MODEL, "OPENROUTER_MODEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    print(f"\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   BASE_URL: {cfg.BASE_URL}")
    print(f"   MODEL: {cfg.MODEL}")
    print(f"   API_KEY: {'*' * 10}...{cfg.API_KEY.get_secret_value()[-4:]}")

    # –°–æ–∑–¥–∞–µ–º ChatOpenAI –∫–ª–∏–µ–Ω—Ç
    llm = ChatOpenAI(
        api_key=cfg.API_KEY.get_secret_value(),
        base_url=cfg.BASE_URL,
        model=cfg.MODEL,
        temperature=0.7,
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    test_message = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ?"
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")

    messages = [HumanMessage(content=test_message)]
    response = llm.invoke(messages)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    assert response is not None, "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω"
    assert response.content, "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ"

    print(f"\nüì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.content}")
    print(f"\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")


@pytest.mark.asyncio
async def test_openrouter_async():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OPENROUTER.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cfg = LangchainConfig()

    # –°–æ–∑–¥–∞–µ–º ChatOpenAI –∫–ª–∏–µ–Ω—Ç
    llm = ChatOpenAI(
        api_key=cfg.API_KEY.get_secret_value(),
        base_url=cfg.BASE_URL,
        model=cfg.MODEL,
        temperature=0.7,
    )

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    test_message = "–ü–æ—Å—á–∏—Ç–∞–π 2+2 –∏ –æ—Ç–≤–µ—Ç—å —á–∏—Å–ª–æ–º"
    print(f"\nüì§ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {test_message}")

    messages = [HumanMessage(content=test_message)]
    response = await llm.ainvoke(messages)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    assert response is not None
    assert response.content

    print(f"\nüì• –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.content}")
    print(f"\n‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")


def test_openrouter_streaming():
    """
    –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OPENROUTER.
    """
    cfg = LangchainConfig()

    llm = ChatOpenAI(
        api_key=cfg.API_KEY.get_secret_value(),
        base_url=cfg.BASE_URL,
        model=cfg.MODEL,
        temperature=0.7,
        streaming=True,
    )

    test_message = "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ç—Ä–∏ —Ü–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
    print(f"\nüì§ –ü–æ—Ç–æ–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_message}")

    messages = [HumanMessage(content=test_message)]

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    chunks = []
    print("\nüì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç:")
    for chunk in llm.stream(messages):
        if chunk.content:
            chunks.append(chunk.content)
            print(chunk.content, end="", flush=True)

    full_response = "".join(chunks)
    print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø–æ—Ç–æ–∫–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç
    assert len(chunks) > 0, "–ü–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π"
    assert full_response, "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π"

    print(f"\n‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ pytest)
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö OPENROUTER")
    print("=" * 60)

    try:
        print("\n" + "=" * 60)
        print("1. –°–ò–ù–•–†–û–ù–ù–´–ô –¢–ï–°–¢")
        print("=" * 60)
        test_openrouter_connection()

        print("\n" + "=" * 60)
        print("2. –ü–û–¢–û–ö–û–í–´–ô –¢–ï–°–¢")
        print("=" * 60)
        test_openrouter_streaming()

        print("\n" + "=" * 60)
        print("3. –ê–°–ò–ù–•–†–û–ù–ù–´–ô –¢–ï–°–¢")
        print("=" * 60)
        import asyncio
        asyncio.run(test_openrouter_async())

        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
